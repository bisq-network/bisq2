syntax = "proto3";
package offer;
option java_package = "bisq.offer.protobuf";
option java_multiple_files = true;
import "common.proto";
import "network.proto";
import "security.proto";
import "account.proto";

enum Direction {
  BUY = 0;
  SELL = 1;
}

// PriceSpec
message FixPrice {
  uint64 value = 1;
}
message FloatPrice {
  double percentage = 1;
}
message MarketPrice {
}
message PriceSpec {
  oneof message {
    FixPrice fixPrice = 1;
    FloatPrice floatPrice = 2;
    MarketPrice marketPrice = 3;
  }
}

message SettlementSpec {
  string settlementMethodName = 1;
  optional string saltedMakerAccountId = 2;
}

// options
message ReputationOption {
  uint64 requiredTotalReputationScore = 1;
}
message TradeTermsOption {
  string makersTradeTerms = 1;
}

message AmountOption {
  double minAmountAsPercentage = 1;
}

message CollateralOption {
  uint64 buyerSecurityDeposit = 1;
  uint64 sellerSecurityDeposit = 2;
}

message FeeOption {
  enum FeeType {
    BTC = 0;
    BSQ = 1;
  }
  FeeType feeType = 10;
  uint32 blockHeightAtFeePayment = 11;
  string feeTxId = 12;
}

message FiatSettlementOption {
  string countyCodeOfBank = 1;
  string bankName = 2;
}

message OfferOption {
  oneof message {
    TradeTermsOption tradeTermsOption = 1;
    ReputationOption reputationOption = 2;
    AmountOption amountOption = 33;
    CollateralOption collateralOption = 4;
    FiatSettlementOption fiatSettlementOption = 5;
    FeeOption feeOption = 6;
  }
}

// Offer
message SwapOffer {
  string id = 1;
  uint64 date = 2;
  network.NetworkId makerNetworkId = 3;
  common.Market market = 4;
  Direction direction = 5;
  uint64 baseSideAmount = 6;
  PriceSpec priceSpec = 7;
  repeated account.SwapProtocolType swapProtocolTypes = 8;
  repeated SettlementSpec baseSideSettlementSpecs = 9;
  repeated SettlementSpec quoteSideSettlementSpecs = 10;
  repeated OfferOption offerOptions = 11;
  oneof message {
    BisqEasyOffer bisqEasyOffer = 30;
  }
}

// BisqEasy
message BisqEasyOffer {
  uint64 quoteSideAmount = 1;
}


message PocOffer {
  string id = 1;
  uint64 date = 2;
  network.NetworkId makerNetworkId = 3;
  common.Market market = 4;
  Direction direction = 5;
  uint64 baseAmount = 6;
  PriceSpec priceSpec = 7;
  repeated account.SwapProtocolType swapProtocolTypes = 8;
  repeated SettlementSpec baseSideSettlementSpecs = 9;
  repeated SettlementSpec quoteSideSettlementSpecs = 10;
  repeated OfferOption offerOptions = 11;
  network.MetaData metaData = 12;
}

message OpenOffer {
  PocOffer offer = 1;
}
message OpenOfferStore {
  repeated OpenOffer openOffers = 1;
}
    
