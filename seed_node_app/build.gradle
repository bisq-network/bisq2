plugins {
    id 'bisq.java-library'
    id 'application'
    alias(libs.plugins.shadow)
  /*  alias(libs.plugins.jpackage)*/
}

application {
    project.mainClassName = 'bisq.seed_node.SeedNodeApp'
}

run {
    // Pass command-line properties to application
    // Normally they'd only be applied to the gradle process, but we need them in the started application
    // See https://stackoverflow.com/a/23689696
    systemProperties System.getProperties()
}

dependencies {
    implementation project(':persistence')
    implementation project(':security')
    implementation project(':bonded_roles')
    implementation project(':application')

    implementation 'network:common'
    implementation 'network:network'
    implementation 'network:network-identity'

    implementation libs.typesafe.config
    implementation libs.google.gson
}

distZip.enabled = false
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false
shadowJar.enabled = true

/*

tasks.jpackage {
    dependsOn tasks.clean // Ensure fresh buildDir for every jpackager binary build
    dependsOn tasks.jar, tasks.shadowJar

    // The jpackageTempDir stores temp files used by jpackage for building the installers
    // It can be inspected in order to troubleshoot the packaging process
    File jpackageTempDir = new File(buildDir, "jpackage-temp")

    appName = "Bisq2_seed_node"
    // Remove the -SNAPSHOT suffix from the version string (originally defined in build.gradle)
    // Having it in would have resulted in an invalid version property for several platforms (mac, linux/rpm)
    appVersion = version.replaceAll("-SNAPSHOT", "")
    copyright = 'Copyright (c) 2013-2022 The Bisq developers'
    appDescription = 'A decentralized bitcoin exchange network.'
    vendor = 'Bisq'
    mainClass = "bisq.seed_node.SeedNodeApp"
    mainJar = jar.archiveFileName.get()
    verbose = false
//    arguments = --arguments <main class arguments>
    destination = "$buildDir/$distsDirName"
    input = "$buildDir/$libsDirName"
    licenseFile = "../LICENSE"
    runtimeImage = System.getProperty("java.home")
    temp = jpackageTempDir
//    launchers = --add-launcher <name>=<property file> 

    winMenu = true
    winDirChooser = true
    winShortcut = true
    winPerUserInstall = false
    winConsole = false

    macPackageName = 'Bisq2_seed_node'

    linuxPackageName = 'Bisq2_seed_node'
    linuxDebMaintainer = 'noreply@bisq.network'
    linuxMenuGroup = 'Network'
    linuxRpmLicenseType = 'AGPLv3' // https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses
    // This represents the linux package version (revision)
    // By convention, this is part of the deb/rpm package names, in addition to the software version
    linuxAppRelease = '1'
//    linuxAppCategory = --linux-app-category <category value> // TODO
    linuxShortcut = true

    mac {
        // Avoid error "The first number in an app-version cannot be zero or negative."
        appVersion = appVersion.startsWith('0') ? '1.0.0' : appVersion
        icon = "package/macosx/Bisq2.icns"
        resourceDir = "package/macosx"

        if (project.hasProperty("signBinary")) {
            macSign = true
            // Env variable can be set by calling "export BISQ2_PACKAGE_SIGNING_IDENTITY='Some value'"
            String envVariableSigningID = "$System.env.BISQ2_PACKAGE_SIGNING_IDENTITY"
            // e.g. network.bisq2.CAT is used when binaries are built by @ripcurlx
            String envVariablePrimaryBundleId = "$System.env.BISQ2_PRIMARY_BUNDLE_ID"
            macPackageIdentifier = "${envVariablePrimaryBundleId}"
            macSigningKeyUserName = "${envVariableSigningID}"
        }
    }

    linux {
        // Setting runtimeImage to java.home failed when using JDK from package manager (user vs root ownership of files?)
        // runtimeImage can alternatively be set to a downloaded and extracted JDK
        // Worked well when using IntelliJ IDEA SDKs (File > Project Structure > SDKs > + > Download JDK)
        icon = "package/linux/icon.png"
    }

    windows {
        icon = "package/windows/Bisq2.ico"
        resourceDir = "package/windows"
    }

    additionalParameters = ['--verbose']

    javaOptions = []

    doFirst() {
        jpackageTempDir.mkdirs()
    }

    doLast() {
        File binariesFolderPath = new File("$buildDir/$distsDirName")
        ant.checksum(algorithm: 'SHA-256') {
            ant.fileset(dir: "${binariesFolderPath}")
        }
        println "The binaries and checksums are ready:"
        FileCollection collection = layout.files { binariesFolderPath.listFiles() }
        collection.collect { it.path }.sort().each { println it }

        if (project.hasProperty("signBinary")) {

            String packagePath = "${destination}/${appName}-${appVersion}"

            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                packagePath += ".exe"

                // Set the necessary permissions before calling signtool
                executeCmd("\"attrib -R \"${packagePath}\"\"")

                // In addition to the groovy quotes around the string, the entire Windows command must also be surrounded
                // by quotes, plus each path inside the command has to be quoted as well
                // Reason for this is that the path to the called executable contains spaces
                // See https://stackoverflow.com/questions/6376113/how-do-i-use-spaces-in-the-command-prompt/6378038#6378038
                executeCmd("\"\"C:\\Program Files (x86)\\Windows Kits\\10\\App Certification Kit\\signtool.exe\" sign /v /fd SHA256 /a \"${packagePath}\"\"")
            } else if (Os.isFamily(Os.FAMILY_MAC)) {

                // e.g. network.bisq2.CAT is used when binaries are built by @ripcurlx
                String envVariablePrimaryBundleId = "$System.env.BISQ2_PRIMARY_BUNDLE_ID"

                // Upload for notarization
                // See https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow#3087734
                String envVariableAcUsername = "$System.env.BISQ2_PACKAGE_NOTARIZATION_AC_USERNAME"
                String envVariableAscProvider = "$System.env.BISQ2_PACKAGE_NOTARIZATION_ASC_PROVIDER"
                packagePath += ".dmg"

                def uploadForNotarizationOutput = executeCmd("xcrun altool --notarize-app" +
                        " --primary-bundle-id '${envVariablePrimaryBundleId}'" +
                        " --username '${envVariableAcUsername}'" +
                        " --password '@keychain:AC_PASSWORD'" +
                        " --asc-provider '${envVariableAscProvider}'" +
                        " --file '${packagePath}'")

                def requestUUID = uploadForNotarizationOutput.split('RequestUUID = ')[1].trim()
                println "Extracted RequestUUID: " + requestUUID

                // Every 1 minute, check the status
                def notarizationEndedInSuccess = false
                def notarizationEndedInFailure = false
                while (!(notarizationEndedInSuccess || notarizationEndedInFailure)) {
                    println "Current time is:"
                    executeCmd('date')
                    println "Waiting for 1 minute..."
                    sleep(1 * 60 * 1000)

                    println "Checking notarization status"

                    def checkNotarizationStatusOutput = executeCmd("xcrun altool --notarization-info" +
                            " '${requestUUID}'" +
                            " --username '${envVariableAcUsername}'" +
                            " --password '@keychain:AC_PASSWORD'")

                    notarizationEndedInSuccess = checkNotarizationStatusOutput.contains('success')
                    notarizationEndedInFailure = checkNotarizationStatusOutput.contains('invalid')
                }

                if (notarizationEndedInFailure) {
                    ant.fail('Notarization failed, aborting')
                }

                if (notarizationEndedInSuccess) {
                    println "Notarization was successful"

                    // Staple ticket on dmg
                    executeCmd("xcrun stapler staple" +
                            " '${packagePath}'")
                }
            }
        }
    }
}

def executeCmd(String cmd) {
    String shell
    String shellArg
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        shell = 'cmd'
        shellArg = '/c'
    } else {
        shell = 'bash'
        shellArg = '-c'
    }

    println "Executing command:\n${cmd}\n"
    // See "Executing External Processes" section of
    // http://docs.groovy-lang.org/next/html/documentation/
    def commands = [shell, shellArg, cmd]
    def process = commands.execute(null, project.rootDir)
    def result
    if (process.waitFor() == 0) {
        result = process.text
        println "Command output (stdout):\n${result}"
    } else {
        result = process.err.text
        println "Command output (stderr):\n${result}"
    }
    return result
}*/
