/*
 * This file is part of Bisq.
 *
 * Bisq is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Bisq is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Bisq. If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package account;
option java_package = "bisq.account.protobuf";
option java_multiple_files = true;

import "common.proto";

// ProtocolType
enum TradeProtocolType {
  TRADEPROTOCOLTYPE_UNSPECIFIED = 0;
  TRADEPROTOCOLTYPE_BISQ_EASY = 1;
  TRADEPROTOCOLTYPE_MU_SIG = 2;
  TRADEPROTOCOLTYPE_SUBMARINE = 3;
  TRADEPROTOCOLTYPE_LIQUID_MU_SIG = 4;
  TRADEPROTOCOLTYPE_BISQ_LIGHTNING = 5;
  TRADEPROTOCOLTYPE_LIQUID_SWAP = 6;
  TRADEPROTOCOLTYPE_BSQ_SWAP = 7;
  TRADEPROTOCOLTYPE_LIGHTNING_ESCROW = 8;
  TRADEPROTOCOLTYPE_MONERO_SWAP = 9;
}
enum LoanProtocolType {
  LOANPROTOCOLTYPE_UNSPECIFIED = 0;
  LOANPROTOCOLTYPE_COLLATERALIZED = 1;
  LOANPROTOCOLTYPE_REPUTATION = 2;
}
message ProtocolType {
  oneof message {
    TradeProtocolType tradeProtocolType = 10;
    LoanProtocolType loanProtocolType = 11;
  }
}

// PaymentMethod
message PaymentMethod {
  string paymentRailName = 1;
  oneof message {
    FiatPaymentMethod fiatPaymentMethod = 10;
    BitcoinPaymentMethod bitcoinPaymentMethod = 11;
    CryptoPaymentMethod cryptoPaymentMethod = 12;
    StableCoinPaymentMethod stableCoinPaymentMethod = 13;
    CbdcPaymentMethod cbdcPaymentMethod = 14;
  }
}
message FiatPaymentMethod {
}
message BitcoinPaymentMethod {
}
message CryptoPaymentMethod {
  string code = 1;
}
message StableCoinPaymentMethod {
}
message CbdcPaymentMethod {
}
message FiatPaymentMethodSpec {
}

message BitcoinPaymentMethodSpec {
}

message CryptoPaymentMethodSpec {
}

message StableCoinPaymentMethodSpec {
}

message CbdcPaymentMethodSpec {
}

message PaymentMethodSpec {
  account.PaymentMethod paymentMethod = 1;
  optional string saltedMakerAccountId = 2;
  oneof message {
    BitcoinPaymentMethodSpec bitcoinPaymentMethodSpec = 10;
    FiatPaymentMethodSpec fiatPaymentMethodSpec = 11;
    CryptoPaymentMethodSpec cryptoPaymentMethodSpec = 12;
    StableCoinPaymentMethodSpec stableCoinPaymentMethodSpec = 13;
    CbdcPaymentMethodSpec cbdcPaymentMethodSpec = 14;
  }
}


// AccountPayload
message AccountPayload {
  string id = 1;
  /* string paymentRailName = 2;*/ // todo check if it breaks BE accounts
  oneof message {
    ZelleAccountPayload zelleAccountPayload = 19;
    UserDefinedFiatAccountPayload userDefinedFiatAccountPayload = 20;
    RevolutAccountPayload RevolutAccountPayload = 21;
    CountryBasedAccountPayload countryBasedAccountPayload = 22;
    FasterPaymentsAccountPayload fasterPaymentsAccountPayload = 23;
    PayIdAccountPayload payIdAccountPayload = 24;
    USPostalMoneyOrderAccountPayload usPostalMoneyOrderAccountPayload = 25;
    CashByMailAccountPayload cashByMailAccountPayload = 26;
    InteracETransferAccountPayload interacETransferAccountPayload = 27;

    CryptoAssetAccountPayload cryptoAssetAccountPayload = 100;
  }
}

message CryptoAssetAccountPayload {
  string currencyCode = 1;
  string address = 2;
  bool isInstant = 3;
  optional bool isAutoConf = 4;
  optional sint32 autoConfNumConfirmations = 5;
  optional sint64 autoConfMaxTradeAmount = 6;
  optional string autoConfExplorerUrls = 7;
  oneof message {
    MoneroAccountPayload moneroAccountPayload = 10;
    OtherCryptoAssetAccountPayload otherCryptoAssetAccountPayload = 11;
  }
}

message MoneroAccountPayload {
  bool useSubAddresses = 1;
  optional string privateViewKey = 2;
  optional sint32 accountIndex = 3;
  optional sint32 initialSubAddressIndex = 4;
}

message OtherCryptoAssetAccountPayload {
}

message BsqAccountPayload {
  string address = 1;
}

message UserDefinedFiatAccountPayload {
  string accountData = 2;
}
message RevolutAccountPayload {
  string userName = 1;
  repeated string selectedCurrencyCodes = 2;
}
message CountryBasedAccountPayload {
  string countryCode = 1;
  oneof message {
    BankAccountPayload bankAccountPayload = 20;
    SepaAccountPayload sepaAccountPayload = 21;
    F2FAccountPayload f2fAccountPayload = 22;
    PixAccountPayload pixAccountPayload = 23;
    StrikeAccountPayload strikeAccountPayload = 24;
    AmazonGiftCardAccountPayload amazonGiftCardAccountPayload = 25;
    UpiAccountPayload upiAccountPayload = 26;
    BizumAccountPayload bizumAccountPayload = 27;
    SepaInstantAccountPayload sepaInstantAccountPayload = 28;
    WiseAccountPayload wiseAccountPayload = 29;
    WiseUsdAccountPayload wiseUsdAccountPayload = 30;
    MoneyBeamAccountPayload moneyBeamAccountPayload = 31;
    SwishAccountPayload swishAccountPayload = 32;
    UpholdAccountPayload upholdAccountPayload = 33;
    MoneyGramAccountPayload moneyGramAccountPayload = 34;
    PromptPayAccountPayload promptPayAccountPayload = 35;
    HalCashAccountPayload halCashAccountPayload = 36;
    Pin4AccountPayload pin4AccountPayload = 37;
  }
}

message HalCashAccountPayload {
  string mobileNr = 1;
}
message Pin4AccountPayload {
  string mobileNr = 1;
}
message SepaAccountPayload {
  string holderName = 1;
  string iban = 2;
  string bic = 3;
  repeated string acceptedCountryCodes = 4;
}

message SepaInstantAccountPayload {
  string holderName = 1;
  string iban = 2;
  string bic = 3;
  repeated string acceptedCountryCodes = 4;
}

message WiseAccountPayload {
  repeated string selectedCurrencyCodes = 1;
  string holderName = 2;
  string email = 3;
}

message UpholdAccountPayload {
  repeated string selectedCurrencyCodes = 1;
  string holderName = 2;
  string accountId = 3;
}

message MoneyGramAccountPayload {
  repeated string selectedCurrencyCodes = 1;
  string holderName = 2;
  string email = 3;
}

message WiseUsdAccountPayload {
  string holderName = 1;
  string email = 2;
  string beneficiaryAddress = 3;
}

message MoneyBeamAccountPayload {
  string selectedCurrencyCode = 1;
  string holderName = 2;
  string emailOrMobileNr = 3;
}

message F2FAccountPayload {
  string selectedCurrencyCode = 1;
  string contact = 2;
  string city = 3;
  string extraInfo = 4;
}

message AchTransferAccountPayload {
  string holderAddress = 1;
}

message NationalBankAccountPayload {
  string selectedCurrencyCode = 1;
}

message SameBankAccountPayload {
}

message DomesticWireTransferAccountPayload {
  string holderAddress = 1;
}

enum BankAccountType {
  BANKACCOUNTTYPE_UNSPECIFIED = 0;
  BANKACCOUNTTYPE_CHECKINGS = 1;
  BANKACCOUNTTYPE_SAVINGS = 2;
}

message BankAccountPayload {
  string selectedCurrencyCode = 1;
  optional string holderName = 2;
  optional string holderId = 3;
  optional string bankName = 4;
  optional string bankId = 5;
  optional string branchId = 6;
  string accountNr = 7;
  optional BankAccountType bankAccountType = 8;
  optional string nationalAccountId = 9;
  oneof message {
    AchTransferAccountPayload achTransferAccountPayload = 20;
    NationalBankAccountPayload nationalBankAccountPayload = 21;
    CashDepositAccountPayload cashDepositAccountPayload = 22;
    SameBankAccountPayload sameBankAccountPayload = 23;
    DomesticWireTransferAccountPayload domesticWireTransferAccountPayload = 24;
    //SpecificBanksAccountPayload
  }
}

message ZelleAccountPayload {
  string holderName = 1;
  string emailOrMobileNr = 2;
}

message PixAccountPayload {
  string holderName = 1;
  string pixKey = 2;
}

message PromptPayAccountPayload {
  string promptPayId = 1;
}

message SwishAccountPayload {
  string holderName = 1;
  string mobileNr = 2;
}

message FasterPaymentsAccountPayload {
  string holderName = 1;
  string sortCode = 2;
  string accountNr = 3;
}

message PayIdAccountPayload {
  string holderName = 1;
  string payId = 2;
}

message USPostalMoneyOrderAccountPayload {
  string holderName = 1;
  string postalAddress = 2;
}

message CashByMailAccountPayload {
  string selectedCurrencyCode = 1;
  string postalAddress = 2;
  string contact = 3;
  string extraInfo = 4;
}

message StrikeAccountPayload {
  string holderName = 1;
}

message InteracETransferAccountPayload {
  string holderName = 1;
  string email = 2;
  string question = 3;
  string answer = 4;
}

message AmazonGiftCardAccountPayload {
  string emailOrMobileNr = 1;
}

message CashDepositAccountPayload {
  optional string requirements = 1;
}

message UpiAccountPayload {
  string virtualPaymentAddress = 1;
}

message BizumAccountPayload {
  string mobileNr = 1;
}

// Account
message Account {
  sint64 creationDate = 1;
  string accountName = 2;
  AccountPayload accountPayload = 3;
  PaymentMethod paymentMethod = 4;
  string id = 5;

  oneof message {
    ZelleAccount zelleAccount = 19;
    UserDefinedFiatAccount userDefinedFiatAccount = 20;
    RevolutAccount revolutAccount = 21;
    CountryBasedAccount countryBasedAccount = 22;
    FasterPaymentsAccount fasterPaymentsAccount = 23;
    PayIdAccount payIdAccount = 24;
    USPostalMoneyOrderAccount usPostalMoneyOrderAccount = 25;
    CashByMailAccount cashByMailAccount = 26;
    InteracETransferAccount interacETransferAccount = 27;

    CryptoAssetAccount cryptoAssetAccount = 100;
  }
}

message CryptoAssetAccount {
  oneof message {
    MoneroAccount moneroAccount = 10;
    OtherCryptoAssetAccount otherCryptoAssetAccount = 11;
  }
}

message MoneroAccount {
}

message OtherCryptoAssetAccount {
}


message UserDefinedFiatAccount {
}
message RevolutAccount {
}
message CountryBasedAccount {
  oneof message {
    BankAccount bankAccount = 20;
    SepaAccount sepaAccount = 21;
    F2FAccount f2fAccount = 22;
    PixAccount pixAccount = 23;
    StrikeAccount strikeAccount = 24;
    AmazonGiftCardAccount amazonGiftCardAccount = 25;
    UpiAccount upiAccount = 26;
    BizumAccount bizumAccount = 27;
    SepaInstantAccount sepaInstantAccount = 28;
    WiseAccount wiseAccount = 29;
    WiseUsdAccount wiseUsdAccount = 30;
    MoneyBeamAccount moneyBeamAccount = 31;
    SwishAccount swishAccount = 32;
    UpholdAccount upholdAccount = 33;
    MoneyGramAccount moneyGramAccount = 34;
    PromptPayAccount promptPayAccount = 35;
    HalCashAccount halCashAccount = 36;
    Pin4Account pin4Account = 37;
  }
}
message HalCashAccount {
}
message Pin4Account {
}
message SepaAccount {
}
message SepaInstantAccount {
}
message WiseAccount {
}
message UpholdAccount {
}
message WiseUsdAccount {
}
message MoneyBeamAccount {
}
message MoneyGramAccount {
}
message F2FAccount {
}
message PromptPayAccount {
}
message BankAccount {
  oneof message {
    AchTransferAccount achTransferAccount = 1;
    NationalBankAccount nationalBankAccount = 2;
    CashDepositAccount cashDepositAccount = 3;
    SameBankAccount sameBankAccount = 4;
    DomesticWireTransferAccount domesticWireTransferAccount = 5;
  }
}

message AchTransferAccount {
}

message SameBankAccount {
}

message DomesticWireTransferAccount {
}

message ZelleAccount {
}

message NationalBankAccount {
}

message PixAccount {
}

message SwishAccount {
}

message FasterPaymentsAccount {
}

message PayIdAccount {
}

message USPostalMoneyOrderAccount {
}

message CashByMailAccount {
}

message StrikeAccount {
}

message InteracETransferAccount {
}

message AmazonGiftCardAccount {
}

message CashDepositAccount {
}

message UpiAccount {
}

message BizumAccount {
}

message AccountStore {
  map<string, Account> accountByName = 1;
  optional Account selectedAccount = 2;
}

