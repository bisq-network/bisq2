/*
 * This file is part of Bisq.
 *
 * Bisq is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Bisq is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Bisq. If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package musigrpc;

option java_package = "bisq.trade.protobuf";
option java_multiple_files = true;

/**
 * Same as teh rpc.proto from https://github.com/bisq-network/bisq-musig/blob/main/rpc/src/main/proto/rpc.proto
 */
service Musig {
  rpc InitTrade (PubKeySharesRequest) returns (PubKeySharesResponse);

  rpc GetNonceShares (NonceSharesRequest) returns (NonceSharesMessage);

  rpc GetPartialSignatures (PartialSignaturesRequest) returns (PartialSignaturesMessage);

  rpc SignDepositTx (DepositTxSignatureRequest) returns (DepositPsbt);

  rpc PublishDepositTx (PublishDepositTxRequest) returns (stream TxConfirmationStatus);

  rpc SubscribeTxConfirmationStatus (SubscribeTxConfirmationStatusRequest) returns (stream TxConfirmationStatus);

  rpc SignSwapTx (SwapTxSignatureRequest) returns (SwapTxSignatureResponse);

  rpc CloseTrade (CloseTradeRequest) returns (CloseTradeResponse);
}

//TODO same as TradeRole
enum Role {
  SELLER_AS_MAKER = 0;
  SELLER_AS_TAKER = 1;
  BUYER_AS_MAKER = 2;
  BUYER_AS_TAKER = 3;
}

message PubKeySharesRequest {
  string tradeId = 1;
  Role myRole = 2;
}

message PubKeySharesResponse {
  bytes buyerOutputPubKeyShare = 1;
  bytes sellerOutputPubKeyShare = 2;
  sint32 currentBlockHeight = 3;
}

message NonceSharesRequest {
  string tradeId = 1;
  bytes buyerOutputPeersPubKeyShare = 2;
  bytes sellerOutputPeersPubKeyShare = 3;
  sint64 depositTxFeeRate = 4;       // sats per kwu
  sint64 preparedTxFeeRate = 5;      // sats per kwu
  sint64 tradeAmount = 6;            // sats
  sint64 buyersSecurityDeposit = 7;  // sats
  sint64 sellersSecurityDeposit = 8; // sats
}

message NonceSharesMessage {
  string warningTxFeeBumpAddress = 1;
  string redirectTxFeeBumpAddress = 2;
  bytes halfDepositPsbt = 3;
  bytes swapTxInputNonceShare = 4;
  bytes buyersWarningTxBuyerInputNonceShare = 5;
  bytes buyersWarningTxSellerInputNonceShare = 6;
  bytes sellersWarningTxBuyerInputNonceShare = 7;
  bytes sellersWarningTxSellerInputNonceShare = 8;
  bytes buyersRedirectTxInputNonceShare = 9;
  bytes sellersRedirectTxInputNonceShare = 10;
}

message ReceiverAddressAndAmount {
  string address = 1;
  sint64 amount = 2; // sats
}

message PartialSignaturesRequest {
  string tradeId = 1;
  NonceSharesMessage peersNonceShares = 2;
  repeated ReceiverAddressAndAmount receivers = 3;
  bool buyerReadyToRelease = 4;
}

message PartialSignaturesMessage {
  bytes peersWarningTxBuyerInputPartialSignature = 1;
  bytes peersWarningTxSellerInputPartialSignature = 2;
  bytes peersRedirectTxInputPartialSignature = 3;
  optional bytes swapTxInputPartialSignature = 4;
  optional bytes swapTxInputSighash = 5;
}

message DepositTxSignatureRequest {
  string tradeId = 1;
  PartialSignaturesMessage peersPartialSignatures = 2;
}

message DepositPsbt {
  bytes depositPsbt = 1;
}

message PublishDepositTxRequest {
  string tradeId = 1;
  DepositPsbt depositPsbt = 2;
}

message SubscribeTxConfirmationStatusRequest {
  string tradeId = 1;
  DepositPsbt depositPsbt = 2;
}

message TxConfirmationStatus {
  bytes tx = 1;
  sint32 currentBlockHeight = 2;
  sint32 numConfirmations = 3;
}

message SwapTxSignatureRequest {
  string tradeId = 1;
  bytes swapTxInputPeersPartialSignature = 2;
  bool sellerReadyToRelease = 3;
}

message SwapTxSignatureResponse {
  bytes swapTx = 1;
  bytes peerOutputPrvKeyShare = 2;
}

message CloseTradeRequest {
  string tradeId = 1;
  optional bytes myOutputPeersPrvKeyShare = 2;
  optional bytes swapTx = 3;
}

message CloseTradeResponse {
  bytes peerOutputPrvKeyShare = 1;
}
