/*
 * This file is part of Bisq.
 *
 * Bisq is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Bisq is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Bisq. If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package trade;
option java_package = "bisq.trade.protobuf";
option java_multiple_files = true;

import "offer.proto";
import "network_identity.proto";
import "contract.proto";
import "identity.proto";

message TradeParty {
  network.identity.NetworkId networkId = 1;
  optional contract.ContractSignatureData contractSignatureData = 2;
  oneof message {
    BisqEasyTradeParty bisqEasyTradeParty = 20;
    MuSigTradeParty muSigTradeParty = 21;
  }
}

enum TradeRole{
  TRADEROLE_UNSPECIFIED = 0;
  TRADEROLE_BUYER_AS_TAKER = 1;
  TRADEROLE_BUYER_AS_MAKER = 2;
  TRADEROLE_SELLER_AS_TAKER = 3;
  TRADEROLE_SELLER_AS_MAKER = 4;
}
message Trade {
  string state = 1;
  string id = 2;
  TradeRole tradeRole = 3;
  identity.Identity myIdentity = 4;
  contract.Contract contract = 5;
  TradeParty taker = 6;
  TradeParty maker = 7;
  optional string errorMessage = 8;
  optional string errorStackTrace = 9;
  optional string peersErrorMessage = 10;
  optional string peersErrorStackTrace = 11;

  oneof message {
    BisqEasyTrade bisqEasyTrade = 30;
    MuSigTrade muSigTrade = 31;
  }
}
message TradeMessage {
  string id = 1;
  string tradeId = 2;
  string protocolVersion = 3;
  network.identity.NetworkId sender = 4;
  network.identity.NetworkId receiver = 5;
  oneof message {
    BisqEasyTradeMessage bisqEasyTradeMessage = 20;
    MuSigTradeMessage muSigTradeMessage = 21;
  }
}

// BisqEasy
message BisqEasyTradeParty {
}

message BisqEasyTrade {
  optional string paymentAccountData = 1;
  optional string bitcoinPaymentData = 2;
  optional string paymentProof = 3;
  optional contract.Role interruptTradeInitiator = 4;
  optional sint64 tradeCompletedDate = 5;
}

message BisqEasyTradeStore {
  repeated Trade trades = 1;
  repeated string tradeIds = 2;
}

// BisqEasy messages
message BisqEasyTradeMessage {
  oneof message {
    BisqEasyTakeOfferRequest bisqEasyTakeOfferRequest = 20;
    BisqEasyTakeOfferResponse bisqEasyTakeOfferResponse = 21;
    BisqEasyAccountDataMessage bisqEasyAccountDataMessage = 22;
    BisqEasyConfirmFiatSentMessage bisqEasyConfirmFiatSentMessage = 23;
    BisqEasyBtcAddressMessage bisqEasyBtcAddressMessage = 24;
    BisqEasyConfirmFiatReceiptMessage bisqEasyConfirmFiatReceiptMessage = 25;
    BisqEasyConfirmBtcSentMessage bisqEasyConfirmBtcSentMessage = 26;
    BisqEasyRejectTradeMessage bisqEasyRejectTradeMessage = 27;
    BisqEasyCancelTradeMessage bisqEasyCancelTradeMessage = 28;
    BisqEasyReportErrorMessage bisqEasyReportErrorMessage = 29;
  }
}
message BisqEasyTakeOfferRequest {
  contract.Contract bisqEasyContract = 1;
  contract.ContractSignatureData contractSignatureData = 2;
}
message BisqEasyTakeOfferResponse {
  contract.ContractSignatureData contractSignatureData = 1;
}
message BisqEasyAccountDataMessage {
  string paymentAccountData = 1;
  offer.Offer bisqEasyOffer = 2;
}
message BisqEasyConfirmFiatSentMessage {
}
message BisqEasyBtcAddressMessage {
  string bitcoinPaymentData = 1;
  offer.Offer bisqEasyOffer = 2;
}
message BisqEasyConfirmFiatReceiptMessage {
}
message BisqEasyConfirmBtcSentMessage {
  optional string paymentProof = 1;
}
message BisqEasyRejectTradeMessage {
}
message BisqEasyCancelTradeMessage {
}
message BisqEasyReportErrorMessage {
  string errorMessage = 1;
  string stackTrace = 2;
}


// MuSig
message MuSigTradeParty {
}

message MuSigTrade {
  optional contract.Role interruptTradeInitiator = 1;
  optional sint64 tradeCompletedDate = 2;
}

message MuSigTradeStore {
  map<string, Trade> tradeById = 1;
}

// MuSig GRPC

service Musig {
  rpc InitTrade (PubKeySharesRequest) returns (PubKeySharesResponse);

  rpc GetNonceShares (NonceSharesRequest) returns (NonceSharesMessage);

  rpc GetPartialSignatures (PartialSignaturesRequest) returns (PartialSignaturesMessage);

  rpc SignDepositTx (DepositTxSignatureRequest) returns (DepositPsbt);

  rpc PublishDepositTx (PublishDepositTxRequest) returns (stream TxConfirmationStatus);

  rpc SignSwapTx (SwapTxSignatureRequest) returns (SwapTxSignatureResponse);

  rpc CloseTrade (CloseTradeRequest) returns (CloseTradeResponse);
}

//TODO same as TradeRole
enum Role {
  SELLER_AS_MAKER = 0;
  SELLER_AS_TAKER = 1;
  BUYER_AS_MAKER = 2;
  BUYER_AS_TAKER = 3;
}

message PubKeySharesRequest {
  string tradeId = 1;
  Role myRole = 2;
}

message PubKeySharesResponse {
  bytes buyerOutputPubKeyShare = 1;
  bytes sellerOutputPubKeyShare = 2;
  uint32 currentBlockHeight = 3;
}

message NonceSharesRequest {
  string tradeId = 1;
  bytes buyerOutputPeersPubKeyShare = 2;
  bytes sellerOutputPeersPubKeyShare = 3;
  uint64 depositTxFeeRate = 4;       // sats per kwu
  uint64 preparedTxFeeRate = 5;      // sats per kwu
  uint64 tradeAmount = 6;            // sats
  uint64 buyersSecurityDeposit = 7;  // sats
  uint64 sellersSecurityDeposit = 8; // sats
}

message NonceSharesMessage {
  string warningTxFeeBumpAddress = 1;
  string redirectTxFeeBumpAddress = 2;
  bytes halfDepositPsbt = 3;
  bytes swapTxInputNonceShare = 4;
  bytes buyersWarningTxBuyerInputNonceShare = 5;
  bytes buyersWarningTxSellerInputNonceShare = 6;
  bytes sellersWarningTxBuyerInputNonceShare = 7;
  bytes sellersWarningTxSellerInputNonceShare = 8;
  bytes buyersRedirectTxInputNonceShare = 9;
  bytes sellersRedirectTxInputNonceShare = 10;
}

message ReceiverAddressAndAmount {
  string address = 1;
  uint64 amount = 2; // sats
}

message PartialSignaturesRequest {
  string tradeId = 1;
  NonceSharesMessage peersNonceShares = 2;
  repeated ReceiverAddressAndAmount receivers = 3;
}

message PartialSignaturesMessage {
  bytes peersWarningTxBuyerInputPartialSignature = 1;
  bytes peersWarningTxSellerInputPartialSignature = 2;
  bytes peersRedirectTxInputPartialSignature = 3;
  optional bytes swapTxInputPartialSignature = 4;
}

message DepositTxSignatureRequest {
  string tradeId = 1;
  PartialSignaturesMessage peersPartialSignatures = 2;
}

message DepositPsbt {
  bytes depositPsbt = 1;
}

message PublishDepositTxRequest {
  string tradeId = 1;
  DepositPsbt depositPsbt = 2;
}

message TxConfirmationStatus {
  bytes tx = 1;
  uint32 currentBlockHeight = 2;
  uint32 numConfirmations = 3;
}

message SwapTxSignatureRequest {
  string tradeId = 1;
  bytes swapTxInputPeersPartialSignature = 2;
}

message SwapTxSignatureResponse {
  bytes swapTx = 1;
  bytes peerOutputPrvKeyShare = 2;
}

message CloseTradeRequest {
  string tradeId = 1;
  optional bytes myOutputPeersPrvKeyShare = 2;
  optional bytes swapTx = 3;
}

message CloseTradeResponse {
  bytes peerOutputPrvKeyShare = 1;
}

// MuSig network messages
message MuSigTradeMessage {
  oneof message {
    MuSigTakeOfferRequest muSigTakeOfferRequest = 19;
    MuSigSetupTradeMessage_A muSigSetupTradeMessage_A = 20;
    MuSigSetupTradeMessage_B muSigSetupTradeMessage_B = 21;
    MuSigSetupTradeMessage_C muSigSetupTradeMessage_C = 22;
    MuSigSetupTradeMessage_D muSigSetupTradeMessage_D = 23;
    MuSigPaymentInitiatedMessage_E muSigPaymentInitiatedMessage_E = 24;
    MuSigPaymentReceivedMessage_F muSigPaymentReceivedMessage_F = 25;
    MuSigCooperativeClosureMessage_G muSigCooperativeClosureMessage_G = 26;
  }
}

message MuSigSetupTradeMessage_A {
  contract.Contract contract = 1;
  contract.ContractSignatureData contractSignatureData = 2;
  PubKeySharesResponse pubKeySharesResponse = 3;
}
message MuSigTakeOfferRequest {
  contract.Contract contract = 1;
  contract.ContractSignatureData contractSignatureData = 2;
}

message MuSigSetupTradeMessage_B {
  contract.Contract contract = 1;
  contract.ContractSignatureData contractSignatureData = 2;
  PubKeySharesResponse pubKeySharesResponse = 3;
}

message MuSigSetupTradeMessage_C {
  NonceSharesMessage nonceSharesMessage = 1;
  PartialSignaturesMessage partialSignaturesMessage = 2;
}

message MuSigSetupTradeMessage_D {
  PartialSignaturesMessage partialSignaturesMessage = 1;
}

message MuSigPaymentInitiatedMessage_E {
  // no additional fields; all data inherited from base class
}

message MuSigPaymentReceivedMessage_F {
  SwapTxSignatureResponse swapTxSignatureResponse = 1;
}

message MuSigCooperativeClosureMessage_G {
  CloseTradeResponse closeTradeResponse = 1;
}
